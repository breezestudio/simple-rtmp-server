{"name":"Simple-rtmp-server","tagline":"simple rtmp origin live server over state-threads.","body":"Simple-RTMP-Server\r\n==================\r\n\r\nSRS(SIMPLE RTMP Server) over state-threads created in 2013.<br/>\r\nSRS is a simple, RTMP/HLS, high-performance, single(plan)/multiple processes, edge(plan)/origin live server.<br/>\r\nSRS supports [vhost](https://github.com/winlinvip/simple-rtmp-server/wiki/RtmpUrlVhost), rtmp, [HLS](https://github.com/winlinvip/simple-rtmp-server/wiki/DeliveryHLS), transcoding, forward, [http hooks](https://github.com/winlinvip/simple-rtmp-server/wiki/HTTPCallback). <br/>\r\nBlog: [http://blog.csdn.net/win_lin](http://blog.csdn.net/win_lin) <br/>\r\nSee also: [https://github.com/winlinvip/simple-rtmp-server](https://github.com/winlinvip/simple-rtmp-server) <br/>\r\nSee also: [http://winlinvip.github.io/simple-rtmp-server](http://winlinvip.github.io/simple-rtmp-server) <br/>\r\nTencentQQ: [http://url.cn/WAHICw](http://url.cn/WAHICw) (Group: 212189142)\r\n\r\n### AUTHORS\r\nThe PRIMARY AUTHORS are (and/or have been)(Authors ordered by first contribution): <br/>\r\n* winlin([winterserver](#)): [http://blog.csdn.net/win_lin](http://blog.csdn.net/win_lin) <br/>\r\n* wenjie([wenjiegit](https://github.com/wenjiegit/simple-rtmp-server)): [http://blog.chinaunix.net/uid/25006789.html](http://blog.chinaunix.net/uid/25006789.html) <br/>\r\n\r\nAbout the primary AUTHORS: <br/>\r\n* Contribute important features to SRS. <br/>\r\n* Names of all PRIMARY AUTHORS response in NetConnection.connect and metadata. <br/>\r\n\r\nAnd here is an inevitably incomplete list of MUCH-APPRECIATED CONTRIBUTORS --<br/>\r\npeople who have submitted patches, reported bugs, added translations, helped<br/>\r\nanswer newbie questions, and generally made SRS that much better: [AUTHORS.txt](https://github.com/winlinvip/simple-rtmp-server/blob/master/AUTHORS.txt)\r\n\r\n### Wiki\r\n[https://github.com/winlinvip/simple-rtmp-server/wiki](https://github.com/winlinvip/simple-rtmp-server/wiki)\r\n\r\n### Usage(RTMP) for RTMP only\r\n\r\n<strong>Requires: Centos6.x 64bits, others see [Build](https://github.com/winlinvip/simple-rtmp-server/wiki/Build)</strong><br/>\r\n<strong>Step 0:</strong> get SRS <br/>\r\n<pre>\r\ngit clone https://github.com/winlinvip/simple-rtmp-server &&\r\ncd simple-rtmp-server/trunk\r\n</pre>\r\n<strong>Step 1:</strong> build SRS <br/>\r\n<pre>\r\n./configure --with-ssl --without-hls --without-ffmpeg --without-http && make\r\n</pre>\r\n<strong>Step 2:</strong> start SRS <br/>\r\n<pre>\r\n./objs/srs -c conf/srs.conf\r\n</pre>\r\n<strong>Step 3:</strong> [Adobe FMLE](http://www.adobe.com/cn/products/flash-media-encoder.html) publish demo live stream <br/>\r\n<pre>\r\nFMS URL: rtmp://192.168.1.170/live\r\nStream:  livestream\r\n</pre>\r\n<strong>Step 4:</strong> [VLC (2.1+)](http://www.videolan.org/vlc/) play live stream. <br/>\r\n<pre>\r\nrtmp url: rtmp://192.168.1.170/live/livestream\r\n</pre>\r\n\r\n### Usage(simple) for all features\r\n\r\n<strong>Requires: Centos6.x 64bits, others see [Build](https://github.com/winlinvip/simple-rtmp-server/wiki/Build)</strong><br/>\r\n<strong>Step -1:</strong> get SRS<br/>\r\n<pre>\r\ngit clone https://github.com/winlinvip/simple-rtmp-server &&\r\ncd simple-rtmp-server/trunk\r\n</pre>\r\n<strong>Step 0:</strong> build SRS system.<br/>\r\n<pre>\r\nbash scripts/build.sh\r\n</pre>\r\n<strong>Step 1:</strong> start SRS all demo features.<br/>\r\n<pre>\r\nbash scripts/run.sh\r\n</pre>\r\n<strong>Step 2:</strong> SRS live show: [http://your-server-ip](http://your-server-ip) <br/>\r\n<strong>Step 3:</strong> stop SRS demo<br/>\r\n<pre>\r\nbash scripts/stop.sh\r\n</pre>\r\n\r\n### Usage(detail) for all features\r\n<strong>Requires: Centos6.x 64bits, others see [Build](https://github.com/winlinvip/simple-rtmp-server/wiki/Build)</strong><br/>\r\n<strong>Step 0:</strong> get SRS <br/>\r\n<pre>\r\ngit clone https://github.com/winlinvip/simple-rtmp-server &&\r\ncd simple-rtmp-server/trunk\r\n</pre>\r\n<strong>Step 1:</strong> build SRS <br/>\r\n<pre>\r\n./configure --with-ssl --with-hls --with-ffmpeg --with-http && make\r\n</pre>\r\n<strong>Step 2:</strong> start SRS <br/>\r\n<pre>\r\n./objs/srs -c conf/srs.conf\r\n</pre>\r\n<strong>Step 3(optinal):</strong> start SRS listen at 19350 to forward to<br/>\r\n<pre>\r\n./objs/srs -c conf/srs.19350.conf\r\n</pre>\r\n<strong>Step 4(optinal):</strong> start nginx for HLS <br/>\r\n<pre>\r\nsudo ./objs/nginx/sbin/nginx\r\n</pre>\r\n<strong>Step 5(optinal):</strong> start http hooks for SRS callback <br/>\r\n<pre>\r\npython ./research/api-server/server.py 8085\r\n</pre>\r\n<strong>Step 6:</strong> publish demo live stream <br/>\r\n<pre>\r\nFMS URL: rtmp://127.0.0.1/live?vhost=demo.srs.com\r\nStream:  livestream\r\nFFMPEG to publish the default demo stream:\r\n    for((;;)); do \\\r\n        ./objs/ffmpeg/bin/ffmpeg -re -i ./doc/source.200kbps.768x320.flv \\\r\n        -vcodec copy -acodec copy \\\r\n        -f flv -y rtmp://127.0.0.1/live?vhost=demo.srs.com/livestream; \\\r\n        sleep 1; \\\r\n    done\r\n</pre>\r\n<strong>Step 7:</strong> publish players live stream <br/>\r\n<pre>\r\nFMS URL: rtmp://127.0.0.1/live?vhost=players\r\nStream:  livestream\r\nFFMPEG to publish the players demo stream:\r\n    for((;;)); do \\\r\n        ./objs/ffmpeg/bin/ffmpeg -re -i ./doc/source.200kbps.768x320.flv \\\r\n        -vcodec copy -acodec copy \\\r\n        -f flv -y rtmp://127.0.0.1/live?vhost=players/livestream; \\\r\n        sleep 1; \\\r\n    done\r\n</pre>\r\n<strong>Step 8:</strong> add server ip to client hosts as demo. <br/>\r\n<pre>\r\n# edit the folowing file:\r\n# linux: /etc/hosts\r\n# windows: C:\\Windows\\System32\\drivers\\etc\\hosts\r\n# where server ip is 192.168.2.111\r\n192.168.2.111 demo.srs.com\r\n</pre>\r\n<strong>Step 9:</strong> play live stream. <br/>\r\n<pre>\r\nplayers: http://demo.srs.com/players\r\nrtmp url: rtmp://demo.srs.com/live/livestream\r\nm3u8 url: http://demo.srs.com/live/livestream.m3u8\r\nfor android: http://demo.srs.com/live/livestream.html\r\n</pre>\r\n<strong>Step 10(optinal):</strong> play live stream auto transcoded<br/>\r\n<pre>\r\nrtmp url: rtmp://demo.srs.com/live/livestream_ld\r\nm3u8 url: http://demo.srs.com/live/livestream_ld.m3u8\r\nfor android: http://demo.srs.com/live/livestream_ld.html\r\nrtmp url: rtmp://demo.srs.com/live/livestream_sd\r\nm3u8 url: http://demo.srs.com/live/livestream_sd.m3u8\r\nfor android: http://demo.srs.com/live/livestream_sd.html\r\n</pre>\r\n<strong>Step 11(optinal):</strong> play live stream auto forwarded, the hls dir change to /forward<br/>\r\n<pre>\r\nrtmp url: rtmp://demo.srs.com:19350/live/livestream\r\nm3u8 url: http://demo.srs.com/forward/live/livestream.m3u8\r\nfor android: http://demo.srs.com/forward/live/livestream.html\r\nrtmp url: rtmp://demo.srs.com:19350/live/livestream_ld\r\nm3u8 url: http://demo.srs.com/forward/live/livestream_ld.m3u8\r\nfor android: http://demo.srs.com/forward/live/livestream_ld.html\r\nrtmp url: rtmp://demo.srs.com:19350/live/livestream_sd\r\nm3u8 url: http://demo.srs.com/forward/live/livestream_sd.m3u8\r\nfor android: http://demo.srs.com/forward/live/livestream_sd.html\r\n</pre>\r\n<strong>Step 12(optinal):</strong> modify the config and reload it (all features support reload)<br/>\r\n<pre>\r\nkillall -1 srs\r\n</pre>\r\nor use specified signal to reload:<br/>\r\n<pre>\r\nkillall -s SIGHUP srs\r\n</pre>\r\n\r\n### Architecture\r\nSystem Architecture:\r\n<pre>\r\n+------------------------------------------------------+\r\n|             SRS(Simple RTMP Server)                  |\r\n+---------------+---------------+-----------+----------+\r\n|   API/hook    |   Transcoder  |    HLS    |   RTMP   |\r\n|  http-parser  |  FFMPEG/x264  |  NGINX/ts | protocol |\r\n+---------------+---------------+-----------+----------+\r\n|              Network(state-threads)                  |\r\n+------------------------------------------------------+\r\n|      All Linux(RHEL,CentOS,Ubuntu,Fedora...)         |\r\n+------------------------------------------------------+\r\n</pre>\r\nStream Architecture:\r\n<pre>\r\n        +---------+              +----------+ \r\n        + Publish +              +  Deliver | \r\n        +---|-----+              +----|-----+ \r\n+-----------+-------------------------+----------------+\r\n| Encoder   | SRS(Simple RTMP Server) |     Client     |\r\n+-----------+-------------------------+----------------+\r\n| (FMLE,    |   +-> RTMP protocol ----+-> Flash Player |\r\n| FFMPEG, --+-> +-> HLS/NGINX --------+-> m3u8 player  |\r\n| Flash,    |   +-> Fowarder ---------+-> RTMP Server  |\r\n| XSPLIT,   |   +-> Transcoder -------+-> RTMP Server  |\r\n|  ...)     |   +-> DVR --------------+-> FILE         |\r\n|           |   +-> BandwidthTest ----+-> Flash/StLoad |\r\n+-----------+-------------------------+----------------+\r\n</pre>\r\n(plan) RTMP cluster(origin/edge) Architecture:<br/>\r\nRemark: cluster over forward, see [Cluster](https://github.com/winlinvip/simple-rtmp-server/wiki/Cluster)\r\n<pre>\r\n+---------+       +-----------------+     +-----------------------+ \r\n+ Encoder +--+-->-+  SRS(RTMP Edge) +--->-+     (RTMP Origin)     | \r\n+---------+  |    +-----------------+     |   SRS/FMS/NGINX-RTMP  |\r\n             |                            |    Red5/HELIX/CRTMP   |\r\n             +-------------------------->-+         ......        |\r\n                                          +-----------------------+ \r\nSchema#1: Any RTMP encoder push RTMP stream to RTMP (origin/edge)server,\r\n    where SRS RTMP Edge server will forward stream to origin.\r\n\r\n\r\n+-------------+    +-----------------+      +--------------------+\r\n| RTMP Origin +-->-+  SRS(RTMP Edge) +--+->-+  Client(RTMP/HLS)  |\r\n+-------------+    +-----------------+  |   |  Flash/IOS/Android |\r\n                                        |   +--------------------+\r\n                                        |\r\n                                        |   +-----------------+\r\n                                        +->-+  SRS(RTMP Edge) +\r\n                                            +-----------------+\r\nSchema#2: SRS RTMP Edge server pull stream from origin (or upstream SRS \r\n    RTMP Edge server), then delivery to Client.\r\n</pre>\r\n(plan) SRS Multiple processes Architecture:<br/>\r\n<pre>\r\n                                 +---------------------------+\r\n                           +-----+ worker process(3)         |\r\n+----------------+         |     +---------------------------+\r\n| master process |---(2)---+           \r\n|   (1)manager   |         |     +---------------------------+\r\n+----------------+         +-----+ worker process N          |\r\n                           |     +---------------------------+\r\n                           |\r\n                           |     +---------------------------+\r\n                           +-----+ bandwidth test process(4) |\r\n                                 +---------------------------+\r\nRemark:\r\n(1) master process: to fork processes, schedule fd(client) to the \"right\" \r\n    process, forward messages between processes\r\n(2) communication: master process use unix domain socket to communicate \r\n    with worker processes.\r\n(3) worker process: to provide RTMP streaming service, generate HLS files.\r\n(4) bandwidth test process: for all bandwidth test request, to make the \r\n    bandwidth testing has minimal effect to streaming service\r\n</pre>\r\nBandwidth Test Workflow:\r\n<pre>\r\n   +------------+                    +----------+\r\n   |  Client    |                    |  Server  |\r\n   +-----+------+                    +-----+----+\r\n         |                                 |\r\n         |   connect vhost------------->   |\r\n         |   &lt;-----------result(success)   |\r\n         |                                 |\r\n         |   &lt;----------call(start play)   |\r\n         |   result(playing)---------->    |\r\n         |   &lt;-------------data(playing)   |\r\n         |   &lt;-----------call(stop play)   |\r\n         |   result(stopped)---------->    |\r\n         |                                 |\r\n         |   &lt;-------call(start publish)   |\r\n         |   result(publishing)------->    |\r\n         |   data(publishing)--------->    |\r\n         |   &lt;--------call(stop publish)   |\r\n         |   result(stopped)(1)------->    |\r\n         |                                 |\r\n         |   &lt;--------------------report   |\r\n         |   final(2)----------------->    |\r\n         |           &lt;END>                 |\r\n         \r\n@See: class SrsBandwidth comments.\r\n</pre>\r\n\r\n### System Requirements\r\nSupported operating systems and hardware:\r\n* All Linux , both 32 and 64 bits\r\n* All handware.\r\n\r\n### Summary\r\n1. Simple: also stable enough.<br/>\r\n2. [High-performance](https://github.com/winlinvip/simple-rtmp-server/wiki/Performance): single-thread, async socket, event/st-thread driven.<br/>\r\n3. With RTMP edge server, support origin server.<br/>\r\n4. NO vod streaming, live streaming only.<br/>\r\n5. With multiple processes, support single process.<br/>\r\n6. Support vhost, support \\_\\_defaultVhost\\_\\_.<br/>\r\n7. Support adobe rtmp live streaming.<br/>\r\n8. Support apple [HLS(m3u8)](https://github.com/winlinvip/simple-rtmp-server/wiki/DeliveryHLS) live streaming.<br/>\r\n9. Support reload config to enable changes.<br/>\r\n10. Support cache last gop for flash player to fast startup.<br/>\r\n11. Support listen at multiple ports.<br/>\r\n12. Support long time(>4.6hours) publish/play.<br/>\r\n13. High performace, 1800 connections(500kbps), 900Mbps, CPU 90.2%, 41MB<br/>\r\n14. Support forward publish stream to build active-standby [cluster](https://github.com/winlinvip/simple-rtmp-server/wiki/Cluster).<br/>\r\n15. Support broadcast by forward the stream to other servers(origin/edge).<br/>\r\n16. Support live stream transcoding by ffmpeg.<br/>\r\n17. Support live stream forward(acopy/vcopy) by ffmpeg.<br/>\r\n18. Support ffmpeg filters(logo/overlay/crop), x264 params.<br/>\r\n19. Support audio transcode only, speex/mp3 to aac<br/>\r\n20. Support [http callback api hooks](https://github.com/winlinvip/simple-rtmp-server/wiki/HTTPCallback)(for authentication and injection).<br/>\r\n21. Support bandwidth test api and flash client.<br/>\r\n22. Player, publisher(encoder), and demo pages(jquery+bootstrap). <br/>\r\n23. Demo video meeting or chat(SRS+cherrypy+jquery+bootstrap). <br/>\r\n24. [dev] Full documents in wiki, in chineses. <br/>\r\n25. [plan] Support HLS cluster, use RTMP ATC to generate the TS<br/>\r\n26. [plan] Support RTMP edge server, push/pull stream from any RTMP server<br/>\r\n27. [plan] Support multiple processes, for both origin and edge<br/>\r\n28. [plan] Support network based cli and json result.<br/>\r\n29. [no-plan] Support adobe flash refer/token/swf verification.<br/>\r\n30. [no-plan] Support adobe amf3 codec.<br/>\r\n31. [no-plan] Support dvr(record live to vod file)<br/>\r\n32. [no-plan] Support encryption: RTMPE/RTMPS, HLS DRM<br/>\r\n33. [no-plan] Support RTMPT, http to tranverse firewalls<br/>\r\n34. [no-plan] Support file source, transcoding file to live stream<br/>\r\n35. [no-plan] Support RTSP<br/>\r\n\r\n### Performance\r\n1.  300 connections, 150Mbps, 500kbps, CPU 18.8%, MEM 5956KB.\r\n2.  600 connections, 300Mbps, 500kbps, CPU 32.1%, MEM 9808KB.\r\n3.  900 connections, 450Mbps, 500kbps, CPU 49.9%, MEM 11MB.\r\n4. 1200 connections, 600Mbps, 500kbps, CPU 72.4%, MEM 15MB.\r\n5. 1500 connections, 750Mbps, 500kbps, CPU 81.9%, MEM 28MB.\r\n6. 1800 connections, 900Mbps, 500kbps, CPU 90.2%, MEM 41MB.\r\n\r\n<pre>\r\n[winlin@dev6 srs]$ dstat\r\n----total-cpu-usage---- -dsk/total- ---net/lo-- ---paging-- ---system--\r\nusr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw \r\n 58   9  32   0   0   1|   0  4168k| 277M  277M|   0     0 |  29k   25k\r\n 61   8  30   0   0   1|   0  1168k| 336M  336M|   0     0 |  29k   24k\r\n 63   8  27   0   0   1|   0  2240k| 124M  124M|   0     0 |  32k   33k\r\n 62   8  28   0   0   1|   0  1632k| 110M  110M|   0     0 |  31k   33k\r\n 53   7  40   0   0   1|   0  1360k| 115M  115M|   0     0 |  24k   26k\r\n 51   7  41   0   0   1|   0  1184k| 146M  146M|   0     0 |  24k   27k\r\n 39   6  54   0   0   1|   0  1284k| 105M  105M|   0     0 |  22k   28k\r\n 41   6  52   0   0   1|   0  1264k| 116M  116M|   0     0 |  25k   28k\r\n 48   6  45   0   0   1|   0  1272k| 143M  143M|   0     0 |  27k   27k\r\n</pre>\r\nSee also: [Performance Test Guide](https://github.com/winlinvip/simple-rtmp-server/wiki/Performance)\r\n\r\n### Releases\r\n* 2013-12-25, [Release v0.9](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.9), support bandwidth test, player/encoder/chat demos. 20926 lines.<br/>\r\n* 2013-12-08, [Release v0.8](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.8), support http hooks callback, update [st_load](https://github.com/winlinvip/st-load). 19186 lines.<br/>\r\n* 2013-12-03, [Release v0.7](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.7), support live stream transcoding. 17605 lines.<br/>\r\n* 2013-11-29, [Release v0.6](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.6), support forward stream to origin/edge. 16094 lines.<br/>\r\n* 2013-11-26, [Release v0.5](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.5), support HLS(m3u8), fragment and window. 14449 lines.<br/>\r\n* 2013-11-10, [Release v0.4](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.4), support reload config, pause, longtime publish/play. 12500 lines.<br/>\r\n* 2013-11-04, [Release v0.3](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.3), support vhost, refer, gop cache, listen multiple ports. 11773 lines.<br/>\r\n* 2013-10-25, [Release v0.2](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.2), support rtmp flash publish, h264, time jitter correct. 10125 lines.<br/>\r\n* 2013-10-23, [Release v0.1](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.1), support rtmp FMLE/FFMPEG publish, vp6. 8287 lines.<br/>\r\n* 2013-10-17, Created.<br/>\r\n\r\n### Compare\r\n* SRS v0.9: 20926 lines. player/encoder/chat demos. bandwidth test for encoder/CDN.<br/>\r\n* SRS v0.8: 19186 lines. implements http hooks refer to [nginx-rtmp](https://github.com/arut/nginx-rtmp-module). <br/>\r\n* SRS v0.7: 17605 lines. implements transcoding(FFMPEG) feature refer to [wowza](http://www.wowza.com). <br/>\r\n* SRS v0.6: 16094 lines. important feature forward for CDN. <br/>\r\n* SRS v0.5: 14449 lines. implements HLS feature refer to [nginx-rtmp](https://github.com/arut/nginx-rtmp-module). <br/>\r\n* SRS v0.4: 12500 lines. important feature reload for CDN. <br/>\r\n* SRS v0.3: 11773 lines. implements vhost feature refer to [FMS](http://www.adobe.com/products/adobe-media-server-family.html). <br/>\r\n* SRS v0.2: 10125 lines. implements rtmp protocol stack refer to [nginx-rtmp](https://github.com/arut/nginx-rtmp-module). <br/>\r\n* SRS v0.1: 8287 lines. base on state-threads. <br/>\r\n* nginx-rtmp v1.0.4: 26786 lines <br/>\r\n* nginx v1.5.0: 139524 lines <br/>\r\n\r\n### History\r\n* v1.0, 2014-02-27, add wiki [LowLatency](https://github.com/winlinvip/simple-rtmp-server/wiki/LowLatency), [HTTPCallback](https://github.com/winlinvip/simple-rtmp-server/wiki/HTTPCallback), [ServerSideScript](https://github.com/winlinvip/simple-rtmp-server/wiki/ServerSideScript), [IDE](https://github.com/winlinvip/simple-rtmp-server/wiki/IDE)\r\n* v1.0, 2014-01-19, add wiki [DeliveryHLS](https://github.com/winlinvip/simple-rtmp-server/wiki/DeliveryHLS)\r\n* v1.0, 2014-01-12, add wiki [HowToAskQuestion](https://github.com/winlinvip/simple-rtmp-server/wiki/HowToAskQuestion), [RtmpUrlVhost](https://github.com/winlinvip/simple-rtmp-server/wiki/RtmpUrlVhost)\r\n* v1.0, 2014-01-11, fix jw/flower player pause bug, which send closeStream actually.\r\n* v1.0, 2014-01-05, add wiki [Build](https://github.com/winlinvip/simple-rtmp-server/wiki/Build), [Performance](https://github.com/winlinvip/simple-rtmp-server/wiki/Performance), [Cluster](https://github.com/winlinvip/simple-rtmp-server/wiki/Cluster)\r\n* v1.0, 2014-01-01, change listen(512), chunk-size(60000), to improve performance.\r\n* v1.0, 2013-12-27, merge from wenjie, the bandwidth test feature.\r\n* v0.9, 2013-12-25, [v0.9](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.9) released. 20926 lines.\r\n* v0.9, 2013-12-25, fix the bitrate bug(in Bps), use enhanced microphone.\r\n* v0.9, 2013-12-22, demo video meeting or chat(SRS+cherrypy+jquery+bootstrap).\r\n* v0.9, 2013-12-22, merge from wenjie, support banwidth test.\r\n* v0.9, 2013-12-22, merge from wenjie: support set chunk size at vhost level\r\n* v0.9, 2013-12-21, add [players](http://demo.srs.com/players) for play and publish.\r\n* v0.9, 2013-12-15, ensure the HLS(ts) is continous when republish stream.\r\n* v0.9, 2013-12-15, fix the hls reload bug, feed it the sequence header.\r\n* v0.9, 2013-12-15, refine protocol, use int64_t timestamp for ts and jitter.\r\n* v0.9, 2013-12-15, support set the live queue length(in seconds), drop when full.\r\n* v0.9, 2013-12-15, fix the forwarder reconnect bug, feed it the sequence header.\r\n* v0.9, 2013-12-15, support reload the hls/forwarder/transcoder.\r\n* v0.9, 2013-12-14, refine the thread model for the retry threads.\r\n* v0.9, 2013-12-10, auto install depends tools/libs on centos/ubuntu.\r\n* v0.8, 2013-12-08, [v0.8](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.8) released. 19186 lines.\r\n* v0.8, 2013-12-08, support [http hooks](https://github.com/winlinvip/simple-rtmp-server/wiki/HTTPCallback): on_connect/close/publish/unpublish/play/stop.\r\n* v0.8, 2013-12-08, support multiple http hooks for a event.\r\n* v0.8, 2013-12-07, support http callback hooks, on_connect.\r\n* v0.8, 2013-12-07, support network based cli and json result, add CherryPy 3.2.4.\r\n* v0.8, 2013-12-07, update http/hls/rtmp load test tool [st_load](https://github.com/winlinvip/st-load), use SRS rtmp sdk.\r\n* v0.8, 2013-12-06, support max_connections, drop if exceed.\r\n* v0.8, 2013-12-05, support log_dir, write ffmpeg log to file.\r\n* v0.8, 2013-12-05, fix the forward/hls/encoder bug.\r\n* v0.7, 2013-12-03, [v0.7](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.7) released. 17605 lines.\r\n* v0.7, 2013-12-01, support dead-loop detect for forwarder and transcoder.\r\n* v0.7, 2013-12-01, support all ffmpeg filters and params.\r\n* v0.7, 2013-11-30, support live stream transcoder by ffmpeg.\r\n* v0.7, 2013-11-30, support --with/without -ffmpeg, build ffmpeg-2.1.\r\n* v0.7, 2013-11-30, add ffmpeg-2.1, x264-core138, lame-3.99.5, libaacplus-2.0.2.\r\n* v0.6, 2013-11-29, [v0.6](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.6) released. 16094 lines.\r\n* v0.6, 2013-11-29, add performance summary, 1800 clients, 900Mbps, CPU 90.2%, 41MB.\r\n* v0.6, 2013-11-29, support forward stream to other edge server.\r\n* v0.6, 2013-11-29, support forward stream to other origin server.\r\n* v0.6, 2013-11-28, fix memory leak bug, aac decode bug.\r\n* v0.6, 2013-11-27, support --with or --without -hls and -ssl options.\r\n* v0.6, 2013-11-27, support AAC 44100HZ sample rate for iphone, adjust the timestamp.\r\n* v0.5, 2013-11-26, [v0.5](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.5) released. 14449 lines.\r\n* v0.5, 2013-11-24, support HLS(m3u8), fragment and window.\r\n* v0.5, 2013-11-24, support record to ts file for HLS.\r\n* v0.5, 2013-11-21, add ts_info tool to demux ts file.\r\n* v0.5, 2013-11-16, add rtmp players(OSMF/jwplayer5/jwplayer6).\r\n* v0.4, 2013-11-10, [v0.4](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.4) released. 12500 lines.\r\n* v0.4, 2013-11-10, support config and reload the pithy print.\r\n* v0.4, 2013-11-09, support reload config(vhost and its detail).\r\n* v0.4, 2013-11-09, support reload config(listen and chunk_size) by SIGHUP(1).\r\n* v0.4, 2013-11-09, support longtime(>4.6hours) publish/play.\r\n* v0.4, 2013-11-09, support config the chunk_size.\r\n* v0.4, 2013-11-09, support pause for live stream.\r\n* v0.3, 2013-11-04, [v0.3](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.3) released. 11773 lines.\r\n* v0.3, 2013-11-04, support refer/play-refer/publish-refer.\r\n* v0.3, 2013-11-04, support vhosts specified config.\r\n* v0.3, 2013-11-02, support listen multiple ports.\r\n* v0.3, 2013-11-02, support config file in nginx-conf style.\r\n* v0.3, 2013-10-29, support pithy print log message specified by stage.\r\n* v0.3, 2013-10-28, support librtmp without extended-timestamp in 0xCX chunk packet.\r\n* v0.3, 2013-10-27, support cache last gop for client fast startup.\r\n* v0.2, 2013-10-25, [v0.2](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.2) released. 10125 lines.\r\n* v0.2, 2013-10-25, support flash publish.\r\n* v0.2, 2013-10-25, support h264/avc codec by rtmp complex handshake.\r\n* v0.2, 2013-10-24, support time jitter detect and correct algorithm\r\n* v0.2, 2013-10-24, support decode codec type to cache the h264/avc sequence header.\r\n* v0.1, 2013-10-23, [v0.1](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.1) released. 8287 lines.\r\n* v0.1, 2013-10-23, support basic amf0 codec, simplify the api using c-style api.\r\n* v0.1, 2013-10-23, support shared ptr msg for zero memory copy.\r\n* v0.1, 2013-10-22, support vp6 codec with rtmp protocol specified simple handshake.\r\n* v0.1, 2013-10-20, support multiple flash client play live streaming.\r\n* v0.1, 2013-10-20, support FMLE/FFMPEG publish live streaming.\r\n* v0.1, 2013-10-18, support rtmp message2chunk protocol(send\\_message).\r\n* v0.1, 2013-10-17, support rtmp chunk2message protocol(recv\\_message).\r\n\r\nBeijing, 2013<br/>\r\nWinlin\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}